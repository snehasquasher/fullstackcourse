name: Spur CI/CD Integration

on:
  push:
    branches:
      - test_github_final

jobs:
  trigger_webhook_and_report:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Spur Webhook
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "SPUR_GITHUB_KEY: U2FsdGVkX1/TkqaDoQreZybTGRUNtJyNJDkwAmWUsNHk2PMDlaWBEXwO4LGU1uUY" \
            -H "repo: snehasquasher/fullstackcourse" \
            -H "sha: ${{ github.sha }}" \
            "https://spurserverwebappmulticore.azurewebsites.net/api/integrations/github/webhook?clientId=24&applicationId=25"

      - name: Wait for Statuses
        run: |
          sleep 60  # Adjust this wait time as needed
          
      - name: Collect Statuses and Generate Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Collect statuses
          statuses=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/status")
          
          # Generate report
          total_count=$(echo "$statuses" | jq '.total_count')
          success_count=$(echo "$statuses" | jq '[.statuses[] | select(.state == "success")] | length')
          
          report="Spur \n\n"
          report+="Test Report: $success_count/$total_count successful.\n\n"
          report+="| description | status | details |\n"
          report+="|-------------|--------|--------|\n"
          
          echo "$statuses" | jq -c '.statuses[]' | while read -r line; do
            context=$(echo "$line" | jq -r '.context')
            state=$(echo "$line" | jq -r '.state')
            url=$(echo "$line" | jq -r '.target_url')
            status_icon=$([ "$state" == "success" ] && echo "Passed ✅" || echo "Failed ❌")
            report+="| $context | $status_icon | [Details]($url) |\n"
          done
          
          report+="\ncommit sha: ${{ github.sha }}"
          
          echo "REPORT<<EOF" >> $GITHUB_ENV
          echo "$report" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
                
      - name: Update or Create Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract owner and repo
          IFS='/' read -r owner repo <<< "${{ github.repository }}"
          
          # Extract PR number
          pr=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls" | \
            jq -r '.[0].number')
          
          # Check if a comment already exists
          comment_url=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$owner/$repo/issues/$pr/comments" | \
            jq -r '.[] | select(.body | startswith("Spur")) | .url' | head -n1)
          
          # Update existing comment or create a new one
          if [ -n "$comment_url" ]; then
            curl -X PATCH -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"body\": $(echo "$REPORT" | jq -Rs .)}" \
              "$comment_url"
          else
            curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"body\": $(echo "$REPORT" | jq -Rs .)}" \
              "https://api.github.com/repos/$owner/$repo/issues/$pr/comments"
          fi
